



                     Ecartfrontend


              1 Create a folder Ecart
              2 Inside in it create angular application - ng new e-cart-frontend
              3 cd e-cart-frontend
              4 code .
              5 run angular application - ng s --o
              6 clear code in app.component.html
              7 import 3rd party librries
                       ->bootstrap
                       -> font=awesome
                       ->google fonts(style.css)
              8 LAZZY LOADING
                -Lazzy loading helps keep initial bundle sizes smaller,which is turn helps decrease load times.
                
                
                we have one module in our application - app.module
                here we create another module -
                    ng g m products --route products --module app.module              

              9 component generation
                  ->ng g c products/allProducts
                  -> ng g c products/viewProduct
                  -ng g c Products/wishlist
                 ->ng g c products/cart
                 Not in lazzy loading 
                  -> ng g c header     
                  -> ng g c footer 
                  -> ng g c pageNotFound  
             
             10 setup path

               -> put <router-outlet></router-outlet> in app.component.html
               -> product.routing.module.ts 

               11 API INTEGREATION

                ->import HttpClientModule in app.module.ts
                ->Create a services inside product module -for Api calling
                 
                 -ng g s products/service/Api
                 -> Inside api.service file,
                       -creste a use http dependency injection
                       -also crea function for (getAllproducts()) fetching all products details

                 ->Inside all-products.component file,
                     -create and use api dependency injection
                     -also create a function for integrating api service
                     -get all products details       

                  ->wishlist functionaly is completed

                  ->Prodcut search
                  ng g p products/pipes/filter  

                  Behaviour Subjects
                  If the data is confined to a single component there is (almost) no need for observables. If the data needs to be shared among multiple components however, it is stored in singleton services. And components have no way of knowing the state of data in the service. So observables are used to tell the components the state of the data has been changed.

                  ->cart functionaly